<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[理解 Git 分支管理最佳实践]]></title>
    <url>%2F2017%2F06%2Funderstand-a-successful-git-branching-model%2F</url>
    <content type="text"><![CDATA[前言：本文将以 英文原文为基准，结合 译文 来详细描述在 Git 上如何进行分支管理。 Git 分支有哪些？在进行分支管理讲解之前，我们先来对分支进行一个简单的分类，并明确每一类分支的用途。 分支分类根据生命周期来区分 主分支：master，develop； 临时分支：feature&#47;&#42;，release&#47;&#42;，bugfix&#47;&#42;； 根据功能上区分 发布/预发布分支：master，release&#47;&#42;； 开发分支：develop； 功能分支：feature&#47;&#42;； 热修复分支：hotfix&#47;&#42;； 分支的用途 master：作为发布分支，随时可以将分支上的代码部署到生产环境上。如果在生产环境上发现问题，则需要在 master 分支上创建一个 hotfix&#47;&#42; 分支来修复问题； develop：作为开发分支，所有最新的功能都将在该分支下进行开发，develop 也将是所有分支中功能最全，代码最新的一个分支； feature&#47;&#42;：作为新功能的开发分支，该分支从 develop 分支创建，开发完毕之后需要重新合并到 develop； release&#47;&#42;：作为预发布分支，release&#47;&#42; 分支只能从 develop 分支下创建，且在 git flow 中同一个时间点，只能存在一个预发布分支。只有当上一个版本发布成功之后删除该分支，之后才能进行下一个版本的发布。如果在预发布过程中发现了问题，只能在 release&#47;&#42; 分支上进行修改； hotfix&#47;&#42;：作为热修复分支，只能从 master 分支分离出来。主要是用来修复在生产环境上发现的 bug，修复完成并测试通过后需要将该分支合并回 develop 及 master 上，并删除该分支； Git 分支管理流程在上一部分，我们已经明确了每个主分支及辅助分支的用途与来源了，下面我们就来详细了解一下 Git 分支管理的整个流程。先来看一下分支在完整的功能开发中是如何演变的： 从上图我们可以看出，这一次我们同时开始了两个功能的开发/研究任务，下面我将以此为基础来讲解分支管理的流程。 先拉取最新的 develop 分支，然后以最新的 develop 为基准创建两个新的功能分支 feature/f1 和 feature/f2； 12git pull origin developgit checkout -b feature/f1 develop 开发人员在各自的功能分支上进行开发工作，等当前功能分支所有功能开发完之后，将当前分支交由测试人员进行测试，测试过程中的问题修复及功能修改，均在当前功能分支上进行； 当 feature&#47;f1 上的开发及测试任务均完成之后，将 feature&#47;f1 合并回 develop ，并删除 feature&#47;f1 ； 123git checkout developgit merge --no-ff feature/f1git branch -d feature/f1 从 develop 分支创建新的预发布分支 release/f1，并部署到预发布环境上测试。在预发布环境中发现问题则直接在 release/f1 分支上进行修复； 1git checkout -b release/f1 develop 在生产环境中发现一个 bug1，从 master 上分离出一个热修复分时 hotfix/bug1，并在上面进行修复、测试并在预发布环境中验证，当都验证通过之后将分支重新合并回 develop 及 master，并在 master 上打一个版本修复 tag v0.1.1，最后删除 hotfix/bug1； 12345678910git checkout hotfix/bug1 master.............修复bug.............git checkout developgit merge --no-ff hotfix/bug1git checkout mastergit merge --no-ff hotfix/bug1git tag v0.1.1git branch -d hotfix/bug1 在 feature/f2 分支上的功能 f2 已经开发并测试完成，然后将 feature/f2 合并回 develop，并删除 feature/f2，此时已经存在新功能 f1 的预发布分支 release/f1，所以需要等待其发布完成之后才能创建预发布分支 release/f2； 123git checkout developgit merge --no-ff feature/f2git branch -d feature/f2 预发布分支 release/f1 在预发布环境中完全测试通过，随时可以部署到生产环境。但在部署到生产环境之前，需要将分支合并回 develop 及 master，然后在 master 上打一个正式发布版本的 tag v0.2，最后删除 release/f1； 123456git checkout developgit merge --no-ff release/f1git checkout mastergit merge --no-ff release/f1git tag v0.2git branch -d release/f1 当前已经不存在 release&#47;&#42; 分支，所以可以开始功能 f2 的预发布测试。创建预发布分支 release/f2，并部署预发布环境测试； 1git checkout -b release/f2 develop 分支 release/f2 测试通过，将 release/f2 合并回 develop 及 master，然后在 master 上打一个正式发布版本的 tag v0.3，最后删除 release/f2； 至此，Git 分支管理的整个流程已经讲解完。上述讲解中如果有任何不正确的地方，欢迎大家批评指正，如有疑问欢迎一起讨论。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>分支管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何调试VSIX程序]]></title>
    <url>%2F2017%2F02%2FDebugVSIX%2F</url>
    <content type="text"><![CDATA[近日有个同事找我要公司框架模版的 VisualStudio 插件。由于很长时间没有维护框架模版生成器的代码，忘记如何配置项目，特地在此记录。 项目文件配置进到项目的设置界面，切换到Debug(调试)选项卡，然后修改 启动实验实例、命令行参数 两项内容 – MSDN启动外部程序：C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\devenv.exe命令行参数：/rootsuffix wuwh其中 /rootsuffix 后面的 wuwh 是实验实例的名字，可以自定义详情请看图 VS插件最终安装位置12以VS2015为例C:\Users\%UserName%\AppData\Local\Microsoft\VisualStudio\14.0]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>VSIX</tag>
        <tag>VS插件</tag>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何与fork源进行同步？]]></title>
    <url>%2F2016%2F07%2FConfig-remote-for-fork%2F</url>
    <content type="text"><![CDATA[具体的设置方法就是在配置一个remote，其方法类似于博主之前的一片文章GitHub与GitLab之间同步 先使用命令git remote -v查看一下已经设置的remote地址123$git remote -v#origin git@git.walkingtec.cn:wuwh/TestProject.git (fetch)#origin git@git.walkingtec.cn:wuwh/TestProject.git (push) 添加fork下来的源目录地址1$git remote add upstream git@git.walkingtec.cn:Master/TestProject.git 然后是同步fork源1$git fetch upstream 切换到自己本地的master分支(建议记不住就切换一下即可)12$git checkout master# Switched to branch 'master' 把upstream/master合并到本地master分支1$git merge upstream/master 最后更新到自己fork下来的地址上即可1$git push -u origin master]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub与GitLab之间同步项目]]></title>
    <url>%2F2016%2F07%2FGitHub-GitLab-SyncProject%2F</url>
    <content type="text"><![CDATA[前段时间，博主在自己公司的服务器上搭建了GitLab的环境，准备在公司推广使用GitLab。 期间也遇到了不小的问题与阻碍。 =========下面切入正题================================================ 由于博主之前也在GitHub上有自己的项目。所以想同时在github与gitlab之间进行更新。 首先在我本地已经 clone 了 GitHu b上的项目的代码。1$git clone https://github.com/alienwow/TestProject.git 然后现在gitlab站点上创建一个同名的项目，并在命令行终端中添加remote地址1$git remote add gitlabOrigin git@git.walkingtec.cn:alienwow/TestProject.git 最后将项目同步到GitLab上1$git push -u gitlabOrigin master 此后更新本地文件之后分别同步github与gitlab即可12$git push -u gitlabOrigin master$git push -u origin master]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在MacOSX10.9上编译安装nginx]]></title>
    <url>%2F2016%2F07%2FInstall-Nginx-on-OSX10-11-5%2F</url>
    <content type="text"><![CDATA[1、先要确定是否安装了PCRE库可以在这里下载最新版本的pcre源码。博主下载的是pcre-8.37版本，接下来进行安装：1234$cd ~/Desktop/$tar xzf pcre-8.37.tar.gz &amp;&amp; cd pcre-8.37$sudo ./configure --prefix=/usr/local$sudo make &amp;&amp; sudo make install 2、安装Nginx先上Nginx的官网下载最新的稳定版本，博主使用1.10.1版本。12345678910$cd ~/Desktop/$tar xzf nginx-1.10.1.tar.gz &amp;&amp; cd nginx-1.10.1$mkdir /usr/local/nginx$sudo chown 777 /usr/local/nginx/logs/*.log ./configure \ --prefix=/usr/local/nginx \ --conf-path=/usr/local/nginx/nginx.conf \ --with-http_ssl_module \ --with-http_stub_status_module$sudo make install 添加软连接1$ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx 3、nginx的基本操作================ 启动nginx1$sudo nginx 停止nginx1$sudo nginnginx -s stop 重启nginx1$sudo nginx -s reload 4、nginx的配置============= 修改nginx配置文件1$sudo vi /usr/local/nginx/nginx.conf 配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root /Users/Wenhao.Wu/WebSites; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>OSX</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
</search>