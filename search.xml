<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[部署生产环境shell脚本]]></title>
    <url>%2F2018%2F10%2Fdeploy-confirm%2F</url>
    <content type="text"><![CDATA[之前写了个发布生产及测试环境的shell脚本，前端的同事一不小心就发布到线上去了，现在特地给他写了个发布线上带确认脚本。123456789101112#!/bin/bashecho -e "\033[41;36m Make sure to deploy to the production environment. ? Type 'y' to deploy, type 'n' to quit ...\033[0m"read replyif [[ $reply != 'y' ]]; thenecho -e "\033[41;36m quit ...\033[0m"elseecho -e "\033[41;36m Ready to deploy to production ...\033[0m"## 在这里添加你要发布到生产环境的 shell 脚本echo -e "\033[41;36m Deployment to production completion...\033[0m"fi]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mongodb 常用命令]]></title>
    <url>%2F2018%2F01%2Fmongodb-common-commands%2F</url>
    <content type="text"><![CDATA[基本操作连接数据库1./mongo 127.0.0.1:7003/admin -u admin -p认证1db.auth('userName','pwd')数据库操作12# 查看数据库show dbs用户管理1234567891011121314151617181920212223242526272829303132# 查看用户show users# 创建用户use admindb.createUser( &#123; user: "root", pwd: "abcd-1234", roles: [ &#123; role: "root", db: "admin" &#125; ] &#125;)# 删除用户use dbNamedb.dropUser("userName")# 修改密码 # 方法1：db.changeUserPassword("userName","newPwd") # 方法2：db.updateUser("userName",&#123;pwd:"newPwd"&#125;)# 修改权限db.updateUser("userName",&#123;roles:[&#123;role:"read",db:"testDB"&#125;]&#125;)# 注：updateuser 它是完全替换之前的值，如果要新增或添加 roles 而不是代替它 # 添加权限db.grantRolesToUser("userName", [&#123;role:"readWrite", db:"testDB"&#125;,&#123;role:"read", db:"testDB"&#125;])# 删除权限db.revokeRolesFromUser("userName",[&#123;role:"read", db:"testDB"&#125;])权限详解内建角色数据库用户角色： read、readWrite数据库管理角色： dbAdmin、dbOwner、userAdmin集群管理角色： clusterAdmin、clusterManager、clusterMonitor、hostManager备份恢复角色： backup、restore所有数据库角色： readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase超级用户角色： root；这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）内部角色： __system角色说明Read： 允许用户读取指定数据库readWrite： 允许用户读写指定数据库dbAdmin： 允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profileuserAdmin： 允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户dbOwner： 允许在当前DB中执行任意操作readAnyDatabase： 赋予用户所有数据库的读权限，只在admin数据库中可用readWriteAnyDatabase： 赋予用户所有数据库的读写权限，只在admin数据库中可用userAdminAnyDatabase： 赋予用户所有数据库管理User的权限，只在admin数据库中可用dbAdminAnyDatabase： 赋予管理所有数据库的权限，只在admin数据库中可用root： 超级账号，超级权限，只在admin数据库中可用。集群管理角色clusterAdmin： 赋予管理集群的最高权限，只在admin数据库中可用clusterManager： 赋予管理和监控集群的权限clusterMonitor： 赋予监控集群的权限，对监控工具具有 readonly 的权限hostManager： 赋予管理Server数据导入导出csc 导入 mongo1234mongoimport -h [host] --port [port] -u [userName] -p [password] -d [dbName] -c [collectionName] --type csv --headerline --file [importPath]# 例子：mongoimport -h 127.0.0.1 --port 7003 -u edudot -p abcd-1234 -d edudot -c users --type csv --headerline --file "D:\Users\Wenhao.Wu\Desktop\users.csv"mongo 导出1234mongoexport -h [host] --port [port] -u [userName] -p [password] -d [dbName] -c [collectionName] -f [字段，多个资源英文逗号分隔] --type=csv -o [exportPath] --query=[queryString] --limit=[limitNum]# 例子：mongoexport -h 127.0.0.1 --port 7003 -u admin -p abcd-1234 -d edudot -c fc_msg -f _id,category --type=csv -o "D:\Users\Wenhao.Wu\Desktop\test.csv" --query="&#123;'_id':'asfd'&#125;" --limit=500参考文章piaoxuexieMongoDB 创建用户 修改权限 修改密码 删除用户]]></content>
      <categories>
        <category>NoSQL</category>
      </categories>
      <tags>
        <tag>Mongodb</tag>
        <tag>NoSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git常用命令]]></title>
    <url>%2F2018%2F01%2Fgit-common-commands%2F</url>
    <content type="text"><![CDATA[Branch1234567891011121314151617181920212223242526272829## 创建分支git branch [newBranchName] [srcBranchName]## 推送本地分支到远程服务器git push --set-upstream origin [newBranchName]## 切换分支git checkout [branchName]## 创建分支并切换git checkout -b [newBranchName] [srcBranchName]## 删除本地分支git branch -d [branchName]## 强制删除本地分支git branch -D [branchName]## 删除远程分支git push origin :[branchName]## 删除本地的远程分支git branch -r -D origin/[branchName]## 合并分支# 将 feature/f1 分支合并到 develop 分支上git checkout developgit merge feature/f1Tag123456789101112## 创建 Taggit tag -a [tagName] [-m 'message']## 推送本地标签到远程服务器git push origin --tags## 删除本地 Taggit tag -d [tagName]## 删除远程 Taggit push origin :[tagName]查看 git 操作历史123# 查看所有记录的 HEAD 历史# 可以用于查找丢失的代码git reflog]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Branch</tag>
        <tag>Tag</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ASP.Net Mvc OutputCache 服务器端缓存清理]]></title>
    <url>%2F2017%2F07%2Fasp-netmvc-outputcache%2F</url>
    <content type="text"><![CDATA[前言近日在看 ASP.Net Mvc 的源码，在 OutputCache 上遇到了点问题特地记录一下。在最后知道如何清理服务器端缓存之后，有些同学可能会发现那一句代码可能在直观上与服务器端缓存在什么位置并没有直接的联系（手动捂脸）。什么是 OutputCache在现如今的系统架构设计中，几乎都用到了缓存来提升系统的响应速度。但是缓存又分为多种，根据缓存内容的时机区分，我将缓存分为：数据缓存：需要对缓存的内容进行逻辑上的处理，最后才响应给客户端；页面缓存：直接将缓存的内容响应给客户端；根据我的理解 ASP.Net Mvc 中的 OutputCache 是属于页面缓存。其主要的作用是根据用户请求的 资源URI 及其 请求参数 来区分是否是同一个页面，并将返回的页面缓存到源服务器、代理服务器或者客户端中。当缓存在源服务器时，如何手动清理服务器端缓存？服务器端缓存是缓存在哪里？要解决这个问题，首先就要知道当 Location = OutputCacheLocation.Server 时，页面是缓存什么位置？IIS？System.Web.Caching？等。然而查阅完 OutputCache 相关的源码后并没有发现什么端倪。只能借助 google 来搜了，最终在 stackoverflow 找到了一个相关的问题。By default OutputCacheLocation.Server simply means that the data is stored in IIS Worker Process memory space. if you enabled Kernel-Mode caching the data is stored in the Http.Sys driver memory space (which is an Operating System process, not IIS process).In the case of Windows Azure Shared Caching, the data is serialized and stored in a special process on the Virtual Machine instance, that process is then responsible for managing and synchronization of the cached data between all of the Role instances.haim770how-asp-net-mvc-outputcachelocation-server-works根据@haim770 的描述，我们知道了 OutputCache 的服务器端缓存是缓存在 IIS 进程内的内存空间 的，当启用 Kernel-Mode 内核模式 后，会将页面数据缓存在 http.Sys driver 的内存空间；如何清理服务器端缓存呢？知道了服务器端缓存缓存的位置之后，我们很方便的就可以对缓存进行清理：HttpResponse.RemoveOutputCacheItem(Url.Action(“Index”));参考文章haim770how-asp-net-mvc-outputcachelocation-server-works]]></content>
      <categories>
        <category>ASP.NET</category>
      </categories>
      <tags>
        <tag>ASP.Net</tag>
        <tag>ASP.NetMvc</tag>
        <tag>cache</tag>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[团队开发中的 Git commit 规范]]></title>
    <url>%2F2017%2F06%2Fgit-commit-standard%2F</url>
    <content type="text"><![CDATA[Git commit 规范建议大家按照此规范编写 Git commit message。标题使用祈使语气；标题开头添加 commit type，并以一个空格分隔；标题不要使用句号结尾；标题不超过 70 个字符；用一空行分隔标题与正文；正文解释 why &amp; what，而不是 how；正文在 70 个字符处换行；如果 commit 的内容比较多，建议分拆成多个 commit；删除 Changes to be committed: 以其下面的 #；commit Type:add ( 添加功能或文件 )del ( 删除功能或文件 )mod ( 修改功能或文件 )fix ( 修复 bug [PS: 修复 bug 的描述中包含 Issue 的 ID,如：Issue #269] )refactor ( 重构 )performance ( 提升性能、优化 )dependency ( 升级依赖项，如 .net 平台的 nuget 包，node 的 node_modules 等 )docs ( 修改文档 )规范的 git commit message:1234567891011add 添加博客发布脚本 Changes to be committed: new file: deploy.shmod 修改分数人数分布图批次线样式 Changes to be committed: modified: Web/Views/Innovate/Index.cshtmlfix 修复数说报考迁徙图不分文理科 Changes to be committed: modified: Web/Controllers/InnovateController.cs参考文章oschinaGit 提交的正确姿势：Commit message 编写指南]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[理解 Git 分支管理最佳实践]]></title>
    <url>%2F2017%2F06%2Funderstand-a-successful-git-branching-model%2F</url>
    <content type="text"><![CDATA[Git 分支有哪些在进行分支管理讲解之前，我们先来对分支进行一个简单的分类，并明确每一类分支的用途。分支分类根据生命周期区分主分支：master，develop；临时分支：feature&#47;&#42;，release&#47;&#42;，hotfix&#47;&#42;；根据用途区分发布/预发布分支：master，release&#47;&#42;；开发分支：develop；功能分支：feature&#47;&#42;；热修复分支：hotfix&#47;&#42;；分支的用途master：作为发布分支，随时可以将分支上的代码部署到生产环境上。如果在生产环境上发现问题，则以 master 为基准创建 hotfix&#47;&#42; 分支来修复问题；develop：作为开发分支，所有最新的功能都将在该分支下进行开发，develop 也将是所有分支中功能最全，代码最新的一个分支；feature&#47;&#42;：命名规则feature/功能名称，作为新功能的开发分支，该分支从 develop 创建，开发完毕之后需要重新合并到 develop；release&#47;&#42;：命名规则release/v+发布的版本号，作为预发布分支，release&#47;&#42; 只能从 develop 创建，且在 git flow 中同一个时间点，只能存在一个预发布分支。只有当上一个版本发布成功之后删除该分支，之后才能进行下一个版本的发布。如果在预发布过程中发现了问题，只能在 release&#47;&#42; 分支上进行修改；hotfix&#47;&#42;：命名规则hotfix/v+bug修复的版本号，作为热修复分支，只能从 master 分支分离出来。主要是用来修复在生产环境上发现的 bug，修复完成并测试通过后需要将该分支合并回 develop 及 master 上，并删除该分支；Git 分支管理流程在上一部分，我们已经明确了每个主分支及辅助分支的用途与来源了，下面我们就来详细了解一下 Git 分支管理的整个流程。先来看一下分支在完整的功能开发中是如何演变的：从上图我们可以看出，我们同时开始了两个功能的开发/研究任务，下面我将以此为基础来讲解分支管理的流程。先拉取最新的 develop 分支，然后以最新的 develop 为基准创建两个新的功能分支 feature/f1 和 feature/f2；12git pull origin developgit checkout -b feature/f1 develop开发人员在各自的功能分支上进行开发工作，等当前功能分支开发完之后，将当前分支交由测试人员进行测试，测试过程中的问题修复及功能修改均在当前功能分支上进行；当 feature&#47;f1 上的开发及测试任务均完成之后，将 feature&#47;f1 合并回 develop ，并删除 feature&#47;f1 ；123git checkout developgit merge --no-ff feature/f1git branch -d feature/f1从 develop 分支创建新的预发布分支 release/0.2，并部署到预发布环境上测试。在预发布过程中发现问题则直接在 release/0.2 上进行修复；1git checkout -b release/0.2 develop在生产环境中发现一个 bug，从 master 上分离出一个热修复分支 hotfix/bug1，并在上面进行修复、测试并在预发布环境中验证，当都验证通过之后将分支重新合并回 develop 及 master，并在 master 上打一个热修复 tag v0.1.1，最后删除 hotfix/bug1；12345678910git checkout -b hotfix/bug1 master........................修复bug..ing........................git checkout developgit merge --no-ff hotfix/bug1git checkout mastergit merge --no-ff hotfix/bug1git tag v0.1.1git branch -d hotfix/bug1在 feature/f2 分支上的功能 f2 已经开发并测试完成，然后将 feature/f2 合并回 develop，并删除 feature/f2，此时已经存在新功能 f1 的预发布分支 release/0.2，所以需要等待其发布完成之后才能创建预发布分支 release/0.3；123git checkout developgit merge --no-ff feature/f2git branch -d feature/f2预发布分支 release/0.2 在预发布环境中完全测试通过，随时可以部署到生产环境。但在部署到生产环境之前，需要将分支合并回 develop 及 master，并在 release/0.2 上打一个正式发布版本的 tag v0.2，最后删除 release/0.2；123456git checkout developgit merge --no-ff release/0.2git checkout mastergit merge --no-ff release/0.2git tag v0.2git branch -d release/0.2当前已经不存在 release&#47;&#42; 预发布分支，所以可以开始功能 f2 的预发布上线。创建预发布分支 release/0.3，并部署预发布环境测试；1git checkout -b release/0.3 develop分支 release/0.3 测试通过，将 release/0.3 合并回 develop 及 master，然后在 master 上打一个正式发布版本的 tag v0.3，最后删除 release/0.3；Git Flow上述过程中未使用到 git flow，均是以约定的规范流程进行，大家可以尝试使用 git flow 来管理分支。1234567891011121314151617181920212223242526272829303132333435#初始化 git flow# 设置 feature、release、hotfix、tag 的前缀名git flow init#开始一个新功能 f1 的开发，以 develop 为基准创建 feature/f1git flow feature start f1#....................#....f1 功能开发中....#....................#新功能 f1 开发完成# 合并回 develop# 删除 feature/f1 分支git flow feature finish f1#开始新功能 f1 的预发布验证，版本定为 0.2git flow release start 0.2#新功能 f1 预发布验证通过# 合并到 master 分支# 在 release 上打 tag v0.2# 将 tag v0.2 合并到 develop 分支# 删除 release/0.2 分支git flow release finish 0.2#开始 bug1 的修复，以 master 为基准创建 hotfix/bug1git flow hotfix start 0.2.1# bug1 修复完成# 合并到 master 分支# 在 hotfix 上打 tag v0.2.1# 将 tag v0.2.1 合并到 develop 分支# 删除 hotfix/0.2.1 分支git flow hotfix finish 0.2.1至此，Git 分支管理的整个流程已经讲解完，有兴趣的可以看一下具体的分支管理演示 https://github.com/alienwow/gitbranchmanage。如果有上述讲解中任何不正确的地方，欢迎大家批评指正，如有疑问欢迎一起讨论。参考文章Vincent DriessenA successful Git branching modelJoe Guo介绍一个成功的 Git 分支模型]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>分支管理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何调试 VSIX 程序]]></title>
    <url>%2F2017%2F02%2FDebugVSIX%2F</url>
    <content type="text"><![CDATA[近日有个同事找我要公司框架模版的 VisualStudio 插件。由于很长时间没有维护框架模版生成器的代码，忘记如何配置项目，特地在此记录。项目文件配置进到项目的设置界面，切换到Debug(调试)选项卡，然后修改 启动实验实例、命令行参数 两项内容 – MSDN启动外部程序：C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\Common7\IDE\devenv.exe命令行参数：/rootsuffix wuwh其中 /rootsuffix 后面的 wuwh 是实验实例的名字，可以自定义详情请看图VS插件最终安装位置12以VS2015为例C:\Users\%UserName%\AppData\Local\Microsoft\VisualStudio\14.0]]></content>
      <categories>
        <category>.Net</category>
      </categories>
      <tags>
        <tag>.Net</tag>
        <tag>C#</tag>
        <tag>VSIX</tag>
        <tag>VS插件</tag>
        <tag>VisualStudio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何与fork源进行同步？]]></title>
    <url>%2F2016%2F07%2FConfig-remote-for-fork%2F</url>
    <content type="text"><![CDATA[具体的设置方法就是在配置一个remote，其方法类似于博主之前的一片文章GitHub与GitLab之间同步先使用命令git remote -v查看一下已经设置的remote地址123$git remote -v#origin git@git.walkingtec.cn:wuwh/TestProject.git (fetch)#origin git@git.walkingtec.cn:wuwh/TestProject.git (push)添加fork下来的源目录地址1$git remote add upstream git@git.walkingtec.cn:Master/TestProject.git然后是同步fork源1$git fetch upstream切换到自己本地的master分支(建议记不住就切换一下即可)12$git checkout master# Switched to branch 'master'把upstream/master合并到本地master分支1$git merge upstream/master最后更新到自己fork下来的地址上即可1$git push -u origin master]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub与GitLab之间同步项目]]></title>
    <url>%2F2016%2F07%2FGitHub-GitLab-SyncProject%2F</url>
    <content type="text"><![CDATA[前段时间，博主在自己公司的服务器上搭建了GitLab的环境，准备在公司推广使用GitLab。期间也遇到了不小的问题与阻碍。=========下面切入正题================================================由于博主之前也在GitHub上有自己的项目。所以想同时在github与gitlab之间进行更新。首先在我本地已经 clone 了 GitHu b上的项目的代码。1$git clone https://github.com/alienwow/TestProject.git然后现在gitlab站点上创建一个同名的项目，并在命令行终端中添加remote地址1$git remote add gitlabOrigin git@git.walkingtec.cn:alienwow/TestProject.git最后将项目同步到GitLab上1$git push -u gitlabOrigin master此后更新本地文件之后分别同步github与gitlab即可12$git push -u gitlabOrigin master$git push -u origin master]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>GitLab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[在MacOSX10.9上编译安装nginx]]></title>
    <url>%2F2016%2F07%2FInstall-Nginx-on-OSX10-11-5%2F</url>
    <content type="text"><![CDATA[1、先要确定是否安装了PCRE库可以在这里下载最新版本的pcre源码。博主下载的是pcre-8.37版本，接下来进行安装：1234$cd ~/Desktop/$tar xzf pcre-8.37.tar.gz &amp;&amp; cd pcre-8.37$sudo ./configure --prefix=/usr/local$sudo make &amp;&amp; sudo make install2、安装Nginx先上Nginx的官网下载最新的稳定版本，博主使用1.10.1版本。12345678910$cd ~/Desktop/$tar xzf nginx-1.10.1.tar.gz &amp;&amp; cd nginx-1.10.1$mkdir /usr/local/nginx$sudo chown 777 /usr/local/nginx/logs/*.log ./configure \ --prefix=/usr/local/nginx \ --conf-path=/usr/local/nginx/nginx.conf \ --with-http_ssl_module \ --with-http_stub_status_module$sudo make install添加软连接1$ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx3、nginx的基本操作================启动nginx1$sudo nginx停止nginx1$sudo nginnginx -s stop重启nginx1$sudo nginx -s reload4、nginx的配置=============修改nginx配置文件1$sudo vi /usr/local/nginx/nginx.conf配置1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#user nobody;worker_processes 1;#error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info;#pid logs/nginx.pid;events &#123; worker_connections 1024;&#125;http &#123; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; sendfile on; #tcp_nopush on; #keepalive_timeout 0; keepalive_timeout 65; #gzip on; server &#123; listen 80; server_name localhost; #charset koi8-r; #access_log logs/host.access.log main; location / &#123; root /Users/Wenhao.Wu/WebSites; index index.html index.htm; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; &#125;&#125;]]></content>
      <categories>
        <category>Mac</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
        <tag>OSX</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
</search>